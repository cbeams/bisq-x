/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package bisq.client.kotlin.operations

import bisq.client.kotlin.models.AddOfferRequest
import bisq.client.kotlin.models.Offer

import bisq.client.kotlin.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class OfferbookOperations : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * 
     * 
     * @param addOfferRequest 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun addOffer(addOfferRequest: AddOfferRequest): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = addOfferRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/trading/offerbook",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @param offerId 
     * @return Offer
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getOffer(offerId: kotlin.String): HttpResponse<Offer> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/trading/offerbook/{offerId}".replace("{" + "offerId" + "}", "$offerId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @return kotlin.collections.List<Offer>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getOffers(): HttpResponse<kotlin.collections.List<Offer>> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/trading/offerbook",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetOffersResponse>().map { value }
    }

    @Serializable(GetOffersResponse.Companion::class)
    private class GetOffersResponse(val value: List<Offer>) {
        companion object : KSerializer<GetOffersResponse> {
            private val serializer: KSerializer<List<Offer>> = serializer<List<Offer>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: GetOffersResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = GetOffersResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * 
     * 
     * @param offerId 
     * @return Offer
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun removeOffer(offerId: kotlin.String): HttpResponse<Offer> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/trading/offerbook/{offerId}".replace("{" + "offerId" + "}", "$offerId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


}
