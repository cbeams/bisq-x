plugins {
    kotlin("jvm") version "1.9.22"
    id("org.openapi.generator") version "7.5.0"
}


repositories {
    mavenCentral()
}

dependencies {
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.9.22")
    /*
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.9.22"
    implementation "com.squareup.moshi:moshi-kotlin:1.15.1"
    implementation "com.squareup.moshi:moshi-adapters:1.15.1"
    implementation "com.squareup.okhttp3:okhttp:4.12.0"
    */
}

// The base package for classes generated by the openApiGenerate task
var basePackage = "bisq.client.kotlin"

// Configure the OpenAPI Tools Generator per the docs at [1]
openApiGenerate {
    groupId = "bisq"
    id = "openapi-kotlin-client"
    generatorName = "kotlin"
    inputSpec = "$rootDir/core/oas/build/classes/java/main/META-INF/swagger/bisq-openapi-2.1.0.yml"
    outputDir = projectDir.path
    packageName = basePackage
    apiPackage = "${basePackage}.operations"
    modelPackage = "${basePackage}.models"
    apiNameSuffix = "Operations"
    generateApiTests = false
    generateModelTests = false
    configOptions.put("hideGenerationTimestamp", "true") // [2]
}

tasks.getByName("openApiGenerate") {
    // openApiGenerate will fail if its `inputSpec` (above) does not exist, and this file
    // is created by annotation processing that runs during the :core:oas:compileJava
    // task. The task dependency below ensures that spec generation happens before this
    // task runs.
    //
    // NOTE: openApiGenerate will only run if its `inputSpec` has actually changed since
    // the last run; otherwise it will consider itself UP-TO-DATE as per Gradle's
    // incremental build support. [3]
    dependsOn(":core:oas:compileJava")

    // The following `doFirst` logic ensures that any previously generated sources are
    // removed before the openApiGenerate task runs and re-generates them. Doing this is
    // critical to ensure that model and controller classes that get renamed or removed in
    // bisq.core.*.api packages have their corresponding endpoint and model classes deleted
    // appropriately here in the generated bisq.client.java.* packages. Failing to do
    // this deletion can easily lead to dead and outdated copies of generated endpoint and
    // model classes sticking around in the codebase. Remember that the sources being
    // generating here are not ephemeral: they get generated into the src/ directory as
    // opposed to the build/ directory and get checked into source control. This means
    // they will not just "go away" with the next invocation of `gradle clean`. We must
    // instead explicitly remove them and
    // that's what happens below.
    doFirst {
        delete(
            "api",          // generated openapi.yaml spec (copied from `inputSpec`)
            "src",          // generated client sources
            "docs",         // generated api usage documentation
            "README.md"     // generated api usage documentation
        )
    }
}

// This task dependency ensures that the openApiGenerate task gets run as part of the
// normal build lifecycle, e.g. when running `gradle build` at the command line.
tasks.getByName("compileJava").dependsOn("openApiGenerate")

// [1]: https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator-gradle-plugin/README.adoc#openapigenerate
// [2]: https://github.com/OpenAPITools/openapi-generator/blob/master/docs/generators/java.md#config-options
// [3]: https://docs.gradle.org/current/userguide/gradle_optimizations.html
